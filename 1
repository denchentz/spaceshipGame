import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Alert;
import javafx.scene.image.Image;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class SpaceShipGame extends Application {

    private static final int WIDTH = 700;
    private static final int HEIGHT = 600;

    private static final int SHIP_WIDTH = 50;
    private static final int SHIP_HEIGHT = 70;

    private static final int OBSTACLE_WIDTH = 50;
    private static final int OBSTACLE_HEIGHT = 50;
    private static final int OBSTACLE_SPEED = 3;
    private static final int OBSTACLE_DECISION_INTERVAL = 1000;

    private Image background;
    private Image spaceshipImage;
    private Image obstacleImage;

    private Canvas canvas;
    private GraphicsContext gc;
    private int shipX = WIDTH / 2 - SHIP_WIDTH / 2;
    private int shipY = HEIGHT - SHIP_HEIGHT - 10;
    private List<Obstacle> verticalObstacles = new ArrayList<>();
    private List<Obstacle> horizontalObstacles = new ArrayList<>();
    private boolean gameOver = false;
    private long startTime;

    private QuadTree quadTree;

    @Override
    public void start(Stage primaryStage) {
        background = new Image("file:background.jpg");
        spaceshipImage = new Image("file:spaceship.png");
        obstacleImage = new Image("file:obstacle.png");
        canvas = new Canvas(WIDTH, HEIGHT);
        gc = canvas.getGraphicsContext2D();
        StackPane root = new StackPane();
        root.getChildren().add(canvas);

        quadTree = new QuadTree(0, new Rectangle(0, 0, WIDTH, HEIGHT));

        Scene scene = new Scene(root, WIDTH, HEIGHT);
        scene.setOnKeyPressed(e -> {
            switch (e.getCode()) {
                case W:
                    shipY -= 10; // go up
                    break;
                case S:
                    shipY += 10; // go down
                    break;
                case A:
                    shipX -= 10; // go left
                    break;
                case D:
                    shipX += 10; // go right
                    break;
            }
        });

        primaryStage.setScene(scene);
        primaryStage.setTitle("SpaceShip Game");
        primaryStage.show();

        startGame();
    }

    private void startGame() {
        startTime = System.currentTimeMillis();
        new Thread(() -> {
            Random random = new Random();
            while (!gameOver) {
                Platform.runLater(() -> {
                    draw();
                    move();
                    checkCollisions();
                });
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            Platform.runLater(() -> {
                showGameOverAlert();
            });
        }).start();

        new Thread(() -> {
            Random random = new Random();
            while (!gameOver) {
                Platform.runLater(() -> {
                    if (random.nextInt(100) < 50) {
                        int obstacleX = random.nextInt(WIDTH - OBSTACLE_WIDTH);
                        Obstacle obstacle = new Obstacle(obstacleX, -OBSTACLE_HEIGHT, true);
                        verticalObstacles.add(obstacle);
                        quadTree.insert(obstacle);
                    } else {
                        int obstacleY = random.nextInt(HEIGHT - OBSTACLE_HEIGHT);
                        Obstacle obstacle = new Obstacle(-OBSTACLE_WIDTH, obstacleY, false);
                        horizontalObstacles.add(obstacle);
                        quadTree.insert(obstacle);
                    }
                });
                try {
                    Thread.sleep(meteoroid);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    private void draw() {
        gc.clearRect(0, 0, WIDTH, HEIGHT);

        gc.drawImage(background, 0, 0, WIDTH, HEIGHT);

        gc.drawImage(spaceshipImage, shipX, shipY, SHIP_WIDTH, SHIP_HEIGHT);

        for (Obstacle obstacle : verticalObstacles) {
            gc.drawImage(obstacleImage, obstacle.getX(), obstacle.getY(), OBSTACLE_WIDTH, OBSTACLE_HEIGHT);
        }

        for (Obstacle obstacle : horizontalObstacles) {
            gc.drawImage(obstacleImage, obstacle.getX(), obstacle.getY(), OBSTACLE_WIDTH, OBSTACLE_HEIGHT);
        }
    }

    private void move() {
        for (Obstacle obstacle : horizontalObstacles) {
            obstacle.setY(obstacle.getY() + OBSTACLE_SPEED);
            if (obstacle.getY() > HEIGHT) {
                horizontalObstacles.remove(obstacle);
                quadTree.remove(obstacle);
                break;
            }
        }

        for (Obstacle obstacle : verticalObstacles) {
            obstacle.setX(obstacle.getX() + OBSTACLE_SPEED);
            if (obstacle.getX() > WIDTH) {
                verticalObstacles.remove(obstacle);
                quadTree.remove(obstacle);
                break;
            }
        }
    }

    private void checkCollisions() {
        List<Obstacle> allObstacles = quadTree.query(new Rectangle(shipX, shipY, SHIP_WIDTH, SHIP_HEIGHT));
        for (Obstacle obstacle : allObstacles) {
            if (shipX < obstacle.getX() + OBSTACLE_WIDTH &&
                    shipX + SHIP_WIDTH > obstacle.getX() &&
                    shipY < obstacle.getY() + OBSTACLE_HEIGHT &&
                    shipY + SHIP_HEIGHT > obstacle.getY()) {
                gameOver = true;
                return;
            }
        }
    }

    private void showGameOverAlert() {
        long survivalTime = (System.currentTimeMillis() - startTime) / 1000;
        Platform.runLater(() -> {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Game Over!!!");
            alert.setHeaderText(null);
            alert.setContentText("You survived for " + survivalTime + " seconds.");

            alert.setOnHidden(e -> Platform.exit());

            alert.show();
        });
    }

    public static void main(String[] args) {
        launch(args);
    }

    private static class Obstacle {
        private int x;
        private int y;
        private boolean isHorizontal;

        public Obstacle(int x, int y, boolean isHorizontal) {
            this.x = x;
            this.y = y;
            this.isHorizontal = isHorizontal;
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
        }

        public boolean isHorizontal() {
            return isHorizontal;
        }
    }

}
